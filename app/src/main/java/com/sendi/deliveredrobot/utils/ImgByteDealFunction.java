package com.sendi.deliveredrobot.utils;

import android.util.Log;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.Vector;


public class ImgByteDealFunction {

    public static float Temperature = 0;
    //温度模式定义  分别为国际开尔文温度  摄氏度C  华氏度F
    private static final int  KelvinMode = 0,CentigradeMode =1,FahrenheitMode = 2;
    private static final int TARTGET_TEMPERATURE_MIN = 4690;
    private static final int TARTGET_TEMPERATURE_MAX = 5042;
    private static final int  SensorTinyB = 0 /*tinyb 型号*/,SensorTinyBE =1/*tinybe 型号*/;
    public static final int  Rotate_0 = 0,Rotate_90 =1,Rotate_180 = 2, Rotate_270 =3;
    public static final int AdaptiveThreshold_1 = 0, WarmColor1 = 1, WarmColor2 = 2, Rainbow1 = 3, Rainbow2 = 4, Rainbow3 = 5, RedFever = 6, Dim = 7, Gorgeous = 8, BlackFever = 9;
    private static final int MRotateMode = 0; //支持0:0度,1:90度,2:180度,3:270度  默认0度

    // private static final int MColorMode = 0; //伪彩模式

    public static int mENVTemparate = 28;//环境温度
    public static boolean mENVTemparateMode = false;    //true表示手动设置模式， false表示使用自适应模式
    public static boolean mENVTemparateStudyFlag = false;   //true表示自适应模式已经学习ok，false表示还在自适应学习
	private static boolean mMirrorHorizontallyMode = false; //水平镜像，false不镜像，true镜像
	private static boolean mMirrorVerticallyMode = false; //垂直镜像，false不镜像，true镜像


    /**
     * 设置环境温度
     * @param template
     */
    public static void setmENVTemparate(int template){
        mENVTemparate = template;
        mENVTemparateMode = true;   //一旦进行了手动设置环境温度表示温度补偿为手动设置模式
        Log.e("setmENVTemparate",mENVTemparate+"");
    }

    /**
     * 设置环境温度模式
     * @param mode
     */
    public static void setmENVTemparateMode(boolean mode){
        mENVTemparateMode = mode;   //一旦进行了手动设置环境温度表示温度补偿为手动设置模式
        mENVTemparateStudyFlag = false;   //一旦进行了环境温度适应模式，自适应模式学习需要重新进行学习
        FaceTemperatureInfoList.removeAllElements();
        Log.e("setmENVTemparate",mENVTemparate+"");
    }

    //暖色1
    private static final short [][]WarmColor1Table = {
            {0,0,66},
            {0,0,66},
            {0,0,66},
            {0,0,66},
            {0,0,66},
            {0,0,74},
            {0,0,74}, //6
            {0,0,74},
            {0,0,74},
            {0,0,82},
            {0,0,82},
            {0,0,82},
            {0,0,82},
            {0,0,82},
            {0,0,90},
            {0,0,90},
            {0,0,90},
            {0,0,90},
            {0,0,99},
            {0,0,99},
            {0,0,99},
            {0,0,99},
            {0,0,99}, //22
            {0,0,107},
            {0,0,107},
            {0,0,107},
            {0,0,107},
            {0,0,115},
            {0,0,115},
            {0,0,115},
            {0,0,115},
            {0,0,115},
            {0,0,123},
            {0,0,123},
            {0,0,123},
            {0,0,123}, //35
            {0,0,132},
            {0,0,132},
            {0,0,132},
            {0,0,140},
            {0,0,140},
            {0,0,148},
            {0,0,148},
            {0,0,156},
            {0,0,156},
            {0,0,156},
            {0,0,165},
            {0,0,165},
            {0,0,173},
            {0,0,173},
            {0,0,181},
            {0,0,181},
            {0,0,181}, //52
            {0,0,189},
            {0,0,189},
            {0,0,198},
            {0,0,198},
            {0,0,206},
            {0,0,206},
            {0,0,206},
            {0,0,214},
            {0,0,214},
            {0,0,222},
            {0,0,222},
            {0,0,231},
            {0,0,231},
            {0,0,231},
            {0,0,239},
            {0,0,239},
            {0,0,247},
            {0,0,247}, //70
            {0,0,255},
            {0,0,255},
            {0,0,255},
            {0,0,255},
            {8,0,255},
            {16,0,255},
            {24,0,255},
            {33,0,255},
            {41,0,255},
            {49,0,255},
            {57,0,255}, //81
            {57,0,255},
            {66,0,255},
            {74,0,255},
            {82,0,255},
            {90,0,255},
            {99,0,255},
            {107,0,255},
            {115,0,255},
            {123,0,255},
            {123,0,255},
            {132,0,255},
            {140,0,255},
            {148,0,255},
            {156,0,255},
            {165,0,255},
            {173,0,255},
            {181,0,255},
            {189,0,255},
            {189,0,255},
            {198,0,255},
            {206,0,255}, //102
            {214,0,255},
            {222,0,255},
            {231,0,255},
            {239,0,255},
            {247,0,255},
            {247,0,255},
            {255,0,255},
            {255,0,255},
            {255,0,247},
            {255,0,239},
            {255,0,231},
            {255,0,222},
            {255,0,214},
            {255,0,206},
            {255,0,206},
            {255,0,198},
            {255,0,189},
            {255,0,181},
            {255,0,173},
            {255,0,165},
            {255,0,156},
            {255,0,156},
            {255,0,148},
            {255,0,140},
            {255,0,132},
            {255,0,123},
            {255,0,115},
            {255,0,107},
            {255,0,107},
            {255,0,99},
            {255,0,90},
            {255,0,82},
            {255,0,74},
            {255,0,66},
            {255,0,57},
            {255,0,57},
            {255,0,49},
            {255,0,41},
            {255,0,33},
            {255,0,24},
            {255,0,16},
            {255,0,8},
            {255,0,0},
            {255,0,0},
            {255,0,0}, //147
            {255,8,0},
            {255,16,0},
            {255,24,0},
            {255,33,0},
            {255,41,0},
            {255,49,0},
            {255,57,0},
            {255,57,0},
            {255,66,0},
            {255,74,0},
            {255,82,0},
            {255,90,0},
            {255,99,0},
            {255,107,0},
            {255,115,0},
            {255,123,0},
            {255,123,0},
            {255,132,0},
            {255,140,0},
            {255,148,0},
            {255,156,0},
            {255,165,0},
            {255,173,0},
            {255,181,0},
            {255,189,0},
            {255,189,0}, //173
            {255,198,0},
            {255,206,0},
            {255,214,0},
            {255,222,0},
            {255,231,0},
            {255,239,0},
            {255,247,0},
            {255,247,0},
            {255,255,0},
            {255,255,0},
            {255,255,0},
            {255,255,8},
            {255,255,8},
            {255,255,16},
            {255,255,16},
            {255,255,24},
            {255,255,24},
            {255,255,24},
            {255,255,33},
            {255,255,33}, //193
            {255,255,41},
            {255,255,41},
            {255,255,49},
            {255,255,49},
            {255,255,49},
            {255,255,57},
            {255,255,57},
            {255,255,66},
            {255,255,66},
            {255,255,74},
            {255,255,74},
            {255,255,74},
            {255,255,82},
            {255,255,82},
            {255,255,90},
            {255,255,90},
            {255,255,99},
            {255,255,99},
            {255,255,99},
            {255,255,107},
            {255,255,107},
            {255,255,115},
            {255,255,115},
            {255,255,123},
            {255,255,123},
            {255,255,132},
            {255,255,132},
            {255,255,132},
            {255,255,140},
            {255,255,140},
            {255,255,148},
            {255,255,148},
            {255,255,156},
            {255,255,156},
            {255,255,156}, //228
            {255,255,165},
            {255,255,165},
            {255,255,173},
            {255,255,173},
            {255,255,181},
            {255,255,181},
            {255,255,189},
            {255,255,189},
            {255,255,189},
            {255,255,198},
            {255,255,198},
            {255,255,206},
            {255,255,206},
            {255,255,214},
            {255,255,214},
            {255,255,222},
            {255,255,222},
            {255,255,222},
            {255,255,231},
            {255,255,231},
            {255,255,239},
            {255,255,239},
            {255,255,247},
            {255,255,247},
            {255,255,247},
            {255,255,255},
            {255,255,255}



    };


    //暖色2
    private static final short [][]WarmColor2Table = {
            {0,0,0},
            {0,0,0},
            {0,0,24},
            {0,0,39},
            {0,0,42},
            {0,0,53},
            {0,0,61},
            {1,0,67},
            {1,0,69},
            {0,0,77},
            {1,0,85}, //10
            {3,0,89},
            {3,0,92},
            {4,0,95},
            {5,0,99},
            {7,0,105},
            {9,1,107},
            {10,2,111},
            {11,1,115},
            {11,1,114},
            {14,1,117},
            {15,1,122},
            {18,0,123},
            {23,0,125},
            {26,0,128},
            {28,0,130},
            {32,0,132},
            {33,0,133},
            {36,1,135},
            {40,0,137},
            {46,1,140}, //30
            {50,1,141},
            {52,0,141},
            {53,0,142},
            {56,1,144},
            {62,1,148},
            {62,0,147},
            {63,1,148},
            {67,1,150},
            {71,0,150},
            {74,0,151},
            {76,0,152},
            {79,0,151},
            {84,0,152},
            {85,0,153},
            {87,0,153},
            {90,0,154},
            {92,0,155},
            {97,0,155},
            {97,0,155},
            {102,0,155},//50
            {106,0,155},
            {109,0,157},
            {112,0,157},
            {114,0,157},
            {115,0,157},
            {119,0,159},
            {123,0,159},
            {127,0,157},
            {128,0,157},
            {130,0,157},
            {135,0,155},
            {135,0,155},
            {139,0,157},
            {141,0,157},
            {142,1,155},
            {146,1,154},
            {150,0,154},
            {151,0,155},
            {155,0,156},
            {158,0,155},
            {160,0,155},
            {162,0,155},
            {164,0,155},
            {166,0,154},
            {168,0,155},
            {171,1,152},
            {174,0,153}, //77
            {175,1,151},
            {175,2,150},
            {177,2,151},
            {181,2,150},
            {182,2,151},
            {181,1,150},
            {184,2,150},
            {186,4,149},
            {189,4,148},
            {190,4,146},
            {190,5,145},
            {191,6,144},
            {192,5,146},
            {195,8,144},
            {194,10,144},
            {195,12,142}, //93
            {196,13,139},
            {197,13,137},
            {199,13,136},
            {200,15,135},
            {201,16,135},
            {201,17,135},
            {201,19,132},
            {203,20,129},
            {204,21,126},
            {205,23,123}, //103
            {207,26,119},
            {209,27,119},
            {211,29,115},
            {212,30,113},
            {213,31,112},
            {214,34,109},
            {213,36,104},
            {214,38,102},
            {217,39,99},
            {219,42,95},
            {219,44,90},
            {218,45,87},
            {218,46,85},
            {219,48,80},
            {222,51,72}, //118
            {223,52,64},
            {224,54,62},
            {224,56,58},
            {226,59,49},
            {227,60,42},
            {227,61,37},
            {227,61,36},
            {228,63,29},
            {229,66,25},
            {231,69,24},
            {231,72,22},
            {232,73,18},
            {230,73,18},
            {231,75,17},
            {232,76,14},
            {233,78,12},
            {234,79,12},
            {234,80,11},
            {235,84,8},
            {237,86,7},
            {236,87,7},
            {235,88,6},
            {236,90,5},
            {238,91,5},
            {238,92,6},
            {238,94,5},
            {239,96,4},
            {238,98,3},
            {238,99,2},
            {239,101,3},
            {241,102,3},
            {241,103,2},
            {242,105,1},
            {243,108,1},
            {241,109,0},
            {242,110,1},
            {244,112,2},
            {244,113,1},
            {244,115,0},
            {244,117,0},
            {244,117,0},
            {245,120,0},
            {246,123,1},
            {246,125,1},
            {245,126,0},
            {245,127,0},
            {245,130,1},
            {246,132,0},
            {248,133,1},
            {248,135,0}, //168
            {249,137,1},
            {249,138,1},
            {249,139,0},
            {249,139,0},
            {248,141,0},
            {249,141,0},
            {251,145,0},
            {250,147,0},
            {249,148,0},
            {150,150,0},
            {250,150,0},
            {252,154,0},
            {252,157,0},
            {252,161,1},
            {252,163,1}, //183
            {252,164,0},
            {253,167,1},
            {255,168,1},
            {254,169,0},
            {253,170,0},
            {254,173,1},
            {254,176,1},
            {254,177,1},
            {254,178,1},
            {254,181,0},
            {253,183,0},
            {254,184,0},
            {254,185,0},
            {254,187,0},
            {254,190,2}, //198
            {254,191,2},
            {253,193,0},
            {253,195,0},
            {255,198,2},
            {255,201,2},
            {253,201,0},
            {252,201,1},
            {254,203,2},
            {253,205,1},
            {254,207,3},
            {254,208,3},
            {255,209,6},
            {255,211,7},
            {254,214,8},
            {253,215,11},
            {253,216,13},
            {254,217,14},
            {255,218,15},
            {255,218,18},
            {255,221,23},
            {255,223,27},
            {255,223,28},
            {253,224,34},
            {255,226,37},
            {254,228,42},
            {255,227,44},
            {254,228,48},
            {253,231,57},
            {255,232,65},
            {255,233,69}, //228
            {255,235,75},
            {255,236,78},
            {255,237,86},
            {255,239,95},
            {255,240,100},
            {254,240,108},
            {254,241,111},
            {255,243,120},
            {255,243,130},
            {255,243,139},
            {255,243,145},
            {255,244,148},
            {254,243,155},
            {253,245,163},
            {255,246,169},
            {255,247,177},
            {255,248,183},
            {255,248,190},
            {255,249,199},
            {255,249,202}, //248
            {255,250,208},
            {255,252,210},
            {255,252,218},
            {255,252,222},
            {255,252,226},
            {255,253,235},
            {255,255,245}






};
// 彩虹1
    private static final short [][]Rainbow1Table = {
        {0,0,0},
        {0,0,0},
        {0,0,0},
        {0,0,8},
        {0,0,8},
        {0,0,16},
        {0,0,16},
        {0,0,24},
        {0,0,24},
        {0,0,33},
        {0,0,33},
        {0,0,33},
        {0,0,41},
        {0,0,41},
        {0,0,49},
        {0,0,49},
        {0,0,57},
        {0,0,57},
        {0,0,66},
        {0,0,66},
        {0,0,66},
        {0,0,74},
        {0,0,74},
        {0,0,82},
        {0,0,82},
        {0,0,90},
        {0,0,90},
        {0,0,99},
        {0,0,99},
        {0,0,99}, //29
        {0,0,107},
        {0,0,107},
        {0,0,115},
        {0,0,115},
        {0,0,123},
        {0,0,123},
        {0,0,132},
        {0,0,132},
        {0,0,132},
        {0,0,140},
        {0,0,140},
        {0,0,148},
        {0,0,148},
        {0,0,156},
        {0,0,156},
        {0,0,156},
        {0,0,165},
        {0,0,165},
        {0,0,173},
        {0,0,173}, //49
        {0,0,181},
        {0,0,181},
        {0,0,181},
        {0,0,189},
        {0,0,189},
        {0,0,198},
        {0,0,198},
        {0,0,206},
        {0,0,206},
        {0,0,206},
        {0,0,214},
        {0,0,214},
        {0,0,222},
        {0,0,222},
        {0,0,231},
        {0,0,231},
        {0,0,231},
        {0,0,239},
        {0,0,239},
        {0,0,247},
        {0,0,247},
        {0,0,255},
        {0,0,255},
        {0,0,255},
        {0,0,255},
        {0,0,247}, //75
        {0,8,247},
        {0,8,239},
        {0,16,231},
        {0,16,231},
        {0,24,222},
        {0,24,214},
        {0,33,214},
        {0,33,206},
        {0,33,198},
        {0,41,198},
        {0,41,189},
        {0,49,181},
        {0,49,181},
        {0,57,173},
        {0,57,165},
        {0,66,165},
        {0,66,156},
        {0,66,148},
        {0,74,148},
        {0,74,140},
        {0,82,132},
        {0,82,132}, //97
        {0,90,123},
        {0,90,115},
        {0,99,115},
        {0,99,107},
        {0,99,99},
        {0,107,99},
        {0,107,90},
        {0,115,82},
        {0,115,82},
        {0,123,74},
        {0,123,66},
        {0,132,66},
        {0,132,57},
        {0,132,57},
        {0,140,57}, //112
        {0,140,57},
        {0,148,57},
        {0,148,49},
        {0,156,49},
        {0,156,49},
        {0,156,49},
        {0,165,41},
        {0,165,41},
        {0,173,41},
        {0,173,41},
        {0,181,41},
        {0,181,33},
        {0,181,33},
        {0,189,33},
        {0,189,33},
        {0,198,33},
        {0,198,24},
        {0,206,24},
        {0,206,24},
        {0,206,24},
        {0,214,16}, //133
        {0,214,16},
        {0,222,16},
        {0,222,16},
        {0,231,16},
        {0,231,8},
        {0,231,8},
        {0,239,8},
        {0,239,8},
        {0,247,0},
        {0,247,0},
        {0,255,0},
        {0,255,0},
        {0,255,0},
        {0,255,0},
        {8,255,0},
        {16,255,0},
        {24,255,0},
        {33,255,0},
        {41,255,0},
        {49,255,0}, //153
        {57,255,0},
        {57,255,0},
        {66,255,0},
        {74,255,0},
        {82,255,0},
        {90,255,0},
        {99,255,0},
        {107,255,0},
        {115,255,0},
        {123,255,0},
        {123,255,0},
        {132,255,0},
        {140,255,0},
        {148,255,0},
        {156,255,0}, //168
        {165,255,0},
        {173,255,0},
        {181,255,0},
        {189,255,0},
        {189,255,0},
        {198,255,0},
        {206,255,0},
        {214,255,0},
        {222,255,0},
        {231,255,0},
        {239,255,0},
        {247,255,0},
        {247,255,0},
        {255,255,0},
        {255,255,0},
        {255,255,0}, //184
        {255,247,0},
        {255,247,0},
        {255,239,0},
        {255,239,0},
        {255,231,0},
        {255,231,0},
        {255,231,0},
        {255,222,0},
        {255,222,0},
        {255,214,0},
        {255,214,0},
        {255,206,0},
        {255,206,0},
        {255,206,0}, //198
        {255,198,0},
        {255,198,0},
        {255,189,0},
        {255,189,0},
        {255,181,0},
        {255,181,0},
        {255,181,0},
        {255,173,0},
        {255,173,0},
        {255,165,0},
        {255,165,0},
        {255,156,0},
        {255,156,0},
        {255,156,0}, //212
        {255,148,0},
        {255,148,0},
        {255,140,0},
        {255,140,0},
        {255,132,0},
        {255,132,0},
        {255,132,0},
        {255,123,0},
        {255,123,0},
        {255,115,0},
        {255,115,0},
        {255,107,0},
        {255,107,0},
        {255,107,0},
        {255,99,0},
        {255,99,0},
        {255,90,0},
        {255,90,0},
        {255,82,0},
        {255,82,0},
        {255,74,0},
        {255,74,0},
        {255,74,0},
        {255,66,0},
        {255,66,0},
        {255,57,0},
        {255,57,0},
        {255,49,0},
        {255,49,0}, //241
        {255,41,0},
        {255,41,0},
        {255,41,0},
        {255,33,0},
        {255,33,0},
        {255,24,0},
        {255,24,0},
        {255,16,0},
        {255,16,0},
        {255,8,0},
        {255,8,0},
        {255,8,0},
        {255,0,0},
        {255,0,0}



        };
// 彩虹2
    private static final short [][]Rainbow2Table = {
        {0,0,0},
        {5,0,10},
        {10,0,20},
        {15,0,29},
        {20,0,39},
        {24,0,49},
        {29,0,59},
        {34,0,69},
        {39,0,78},
        {44,0,88},
        {49,0,98},
        {54,0,108},
        {59,0,118},
        {63,0,127},
        {68,0,137},
        {73,0,147},
        {78,0,157},
        {83,0,167},
        {88,0,177},
        {93,0,186},
        {98,0,196},
        {103,0,206},
        {107,0,216},
        {112,0,226},
        {117,0,235},
        {122,0,245},
        {127,0,255},
        {122,0,255},
        {117,0,255},
        {112,0,255},
        {107,0,255},
        {103,0,255},
        {98,0,255},
        {93,0,255},
        {88,0,255},
        {83,0,255},
        {78,0,255},
        {73,0,255},
        {68,0,255},
        {64,0,255},
        {59,0,255},
        {54,0,255},
        {49,0,255},
        {44,0,255},
        {39,0,255},
        {34,0,255},
        {29,0,255},
        {24,0,255},
        {20,0,255},
        {15,0,255},
        {10,0,255}, //50
        {5,0,255},
        {0,0,255},
        {0,5,250},
        {0,10,245},
        {0,15,240},
        {0,20,235},
        {0,25,230},
        {0,30,225},
        {0,35,220},
        {0,40,215},
        {0,45,210},
        {0,50,205},
        {0,55,200},
        {0,60,195},
        {0,65,190},
        {0,70,185},
        {0,75,180},
        {0,80,175},
        {0,85,170},
        {0,90,165},
        {0,95,160},
        {0,100,155},
        {0,105,150},
        {0,110,145},
        {0,115,140},
        {0,120,135},
        {0,125,130},
        {0,130,125},
        {0,135,120},
        {0,140,115},
        {0,145,110},
        {0,150,105},
        {0,155,100},
        {0,160,95},
        {0,165,90},
        {0,170,85},
        {0,175,80},
        {0,180,75},
        {0,185,70},
        {0,190,65},
        {0,195,60},
        {0,200,55},
        {0,205,50},
        {0,210,45},
        {0,215,40},
        {0,220,35},
        {0,225,30},
        {0,230,25},
        {0,235,20},
        {0,240,15},
        {0,245,10},
        {0,250,5},
        {0,255,0},
        {5,255,0},
        {10,255,0},
        {15,255,0},
        {20,255,0},
        {25,255,0},
        {30,255,0},
        {35,255,0}, //110
        {40,255,0},
        {45,255,0},
        {50,255,0},
        {55,255,0},
        {60,255,0},
        {65,255,0},
        {70,255,0},
        {75,255,0},
        {80,255,0},
        {85,255,0},
        {90,255,0},
        {95,255,0},
        {100,255,0},
        {105,255,0},
        {110,255,0},
        {115,255,0},
        {120,255,0},
        {125,255,0},
        {130,255,0},
        {135,255,0}, //130
        {140,255,0},
        {145,255,0},
        {150,255,0},
        {155,255,0},
        {160,255,0},
        {165,255,0},
        {170,255,0},
        {175,255,0},
        {180,255,0},
        {185,255,0}, //140
        {190,255,0},
        {195,255,0},
        {200,255,0},
        {205,255,0},
        {210,255,0},
        {215,255,0},
        {220,255,0},
        {225,255,0},
        {230,255,0},
        {235,255,0},
        {240,255,0},
        {245,255,0},
        {250,255,0},
        {255,255,0},
        {255,250,0},
        {255,245,0},
        {255,240,0},
        {255,235,0},
        {255,230,0},
        {255,225,0},
        {255,220,0},
        {255,215,0},
        {255,210,0},
        {255,205,0},
        {255,200,0},
        {255,195,0},
        {255,190,0},
        {255,185,0},
        {255,180,0},
        {255,175,0}, //170
        {255,170,0},
        {255,165,0},
        {255,160,0},
        {255,155,0},
        {255,150,0},
        {255,145,0},
        {255,140,0},
        {255,135,0},
        {255,130,0},
        {255,125,0},
        {255,120,0},
        {255,115,0},
        {255,110,0},
        {255,105,0},
        {255,100,0},
        {255,95,0},
        {255,90,0},
        {255,85,0},
        {255,80,0},
        {255,75,0},
        {255,70,0},
        {255,65,0},
        {255,60,0},
        {255,55,0},
        {255,50,0},
        {255,45,0},
        {255,40,0},
        {255,35,0},
        {255,30,0},
        {255,25,0}, //200
        {255,20,0},
        {255,15,0},
        {255,10,0},
        {255,5,0},
        {255,0,0},
        {255,5,5},
        {255,10,10},
        {255,15,15},
        {255,20,20},
        {255,25,25},
        {255,30,30},
        {255,35,35},
        {255,40,40},
        {255,45,45},
        {255,50,50},
        {255,55,55},
        {255,60,60},
        {255,65,65},
        {255,70,70},
        {255,75,75}, //220
        {255,80,80},
        {255,85,85},
        {255,90,90},
        {255,95,95},
        {255,100,100},
        {255,105,105},
        {255,110,110},
        {255,115,115},
        {255,120,120},
        {255,125,125}, //230
        {255,130,130},
        {255,135,135},
        {255,140,140},
        {255,145,145},
        {255,150,150},
        {255,155,155},
        {255,160,160},
        {255,165,165},
        {255,170,170},
        {255,175,175},
        {255,180,180},
        {255,185,185},
        {255,190,190},
        {255,195,195},
        {255,200,200},
        {255,205,205},
        {255,210,210},
        {255,215,215},
        {255,220,220},
        {255,225,225},
        {255,230,230},
        {255,235,235},
        {255,240,240},
        {255,245,245},
        {255,250,250}
        };
// 彩虹3
    private static final short [][]Rainbow3Table = {
        {0,0,2},
        {0,0,6},
        {0,0,10},
        {0,0,13},
        {0,0,16},
        {0,0,19},
        {0,0,22},
        {0,0,25},
        {0,0,27},
        {0,0,30},
        {0,0,33}, //10
        {0,0,36},
        {0,0,39},
        {0,0,42},
        {0,0,45},
        {0,0,48},
        {0,0,52},
        {0,0,55},
        {0,0,58},
        {0,0,62},
        {0,0,65}, //20
        {0,0,69},
        {0,0,73},
        {0,0,76},
        {0,0,80},
        {0,0,84},
        {0,0,88},
        {0,0,92},
        {0,0,95},
        {0,0,99},
        {0,0,103}, //30
        {0,0,106},
        {0,0,110},
        {0,0,114},
        {0,0,117},
        {0,0,121},
        {0,0,125},
        {0,0,129},
        {0,0,133},
        {0,0,137},
        {0,0,141}, //40
        {0,0,146},
        {0,0,150},
        {0,0,154},
        {0,0,159},
        {0,0,163},
        {0,0,167},
        {0,0,172},
        {0,0,176},
        {0,0,181},
        {0,0,185}, //50
        {0,0,190},
        {0,0,194},
        {0,0,199},
        {0,0,204},
        {0,0,208},
        {0,0,213},
        {0,0,218},
        {0,0,222},
        {0,0,227},
        {0,0,232}, //60
        {0,0,237},
        {0,0,241},
        {0,0,246},
        {0,0,251},
        {0,2,255},
        {0,16,255},
        {0,24,255},
        {0,31,255},
        {0,37,255},
        {0,42,255}, //70
        {0,47,255},
        {0,51,255},
        {0,55,255},
        {0,59,255},
        {0,63,255},
        {0,66,255},
        {0,69,255},
        {0,73,255},
        {0,76,255},
        {0,79,255}, //80
        {0,82,255},
        {0,85,255},
        {0,88,255},
        {0,90,255},
        {0,93,255},
        {0,96,255},
        {0,98,255},
        {0,101,255},
        {0,104,255},
        {0,106,255}, //90
        {0,109,255},
        {0,111,255},
        {0,114,255},
        {0,116,255},
        {0,119,255},
        {0,121,255},
        {0,123,255},
        {0,126,255},
        {0,128,255},
        {0,131,255}, //100
        {0,133,255},
        {0,135,255},
        {0,137,255},
        {0,140,255},
        {0,142,255},
        {0,144,255},
        {0,146,155},
        {0,149,255},
        {0,151,255},
        {0,153,255}, //110
        {0,155,255},
        {0,157,255},
        {0,159,255},
        {0,162,255},
        {0,164,255},
        {0,166,255},
        {0,168,255},
        {0,170,255},
        {0,172,255},
        {0,174,255}, //120
        {0,176,255},
        {0,178,255},
        {0,181,255},
        {0,183,255},
        {0,185,255},
        {0,187,255},
        {0,189,255},
        {0,191,255},
        {0,193,255},
        {0,195,255}, //130
        {0,197,255},
        {0,199,255},
        {0,201,255},
        {0,203,255},
        {0,205,255},
        {0,207,255},
        {0,209,255},
        {0,211,255},
        {0,213,255},
        {0,215,255}, //140
        {0,217,255},
        {0,219,255},
        {0,221,255},
        {0,223,255},
        {0,225,255},
        {0,227,255},
        {0,229,255},
        {0,231,255},
        {0,233,255},
        {0,235,255}, //150
        {0,237,255},
        {0,239,255},
        {0,242,255},
        {0,244,255},
        {0,246,255},
        {0,248,255},
        {0,250,255},
        {0,252,255},
        {0,254,255},
        {0,255,239}, //160
        {0,255,214},
        {0,255,184},
        {0,255,147},
        {0,255,99},
        {10,255,0},
        {59,255,0},
        {83,255,0},
        {100,255,0},
        {114,255,0},
        {127,255,0}, //170
        {138,255,0},
        {149,255,0},
        {158,255,0},
        {167,255,0},
        {176,255,0},
        {184,255,0},
        {192,255,0},
        {199,255,0},
        {207,255,0},
        {214,255,0}, //180
        {221,255,0},
        {227,255,0},
        {234,255,0},
        {240,255,0},
        {247,255,0},
        {253,255,0},
        {255,253,0},
        {255,251,0},
        {255,248,0},
        {255,245,0}, //190
        {255,243,0},
        {255,240,0},
        {255,238,0},
        {255,235,0},
        {255,233,0},
        {255,230,0},
        {255,227,0},
        {255,225,0},
        {255,222,0},
        {255,220,0}, //200
        {255,217,0},
        {255,214,0},
        {255,212,0},
        {255,209,0},
        {255,207,0},
        {255,204,0},
        {255,201,0},
        {255,199,0},
        {255,196,0},
        {255,193,0}, //210
        {255,191,0},
        {255,188,0},
        {255,185,0},
        {255,183,0},
        {255,180,0},
        {255,177,0},
        {255,175,0},
        {255,172,0},
        {255,169,0},
        {255,167,0}, //220
        {255,164,0},
        {255,161,0},
        {255,158,0},
        {255,155,0},
        {255,153,0},
        {255,150,0},
        {255,147,0},
        {255,144,0},
        {255,141,0},
        {255,138,0}, //230
        {255,135,0},
        {255,132,0},
        {255,129,0},
        {255,125,0},
        {255,122,0},
        {255,119,0},
        {255,115,0},
        {255,112,0},
        {255,108,0},
        {255,105,0}, //240
        {255,101,0},
        {255,97,0},
        {255,93,0},
        {255,89,0},
        {255,85,0},
        {255,80,0},
        {255,75,0},
        {255,70,0},
        {255,65,0},
        {255,59,0}, //250
        {255,52,0},
        {255,44,0},
        {255,35,0},
        {255,23,0},
        {255,0,0}



        };
// 红热
    private static final short [][]RedFeverTable = {
        {1,1,1},
        {3,3,3},
        {4,4,4},
        {5,5,5},
        {7,7,7},
        {8,8,8},
        {9,9,9},
        {10,10,10},
        {12,12,12},
        {13,13,13},
        {14,14,14}, //10
        {16,16,16},
        {17,17,17},
        {18,18,18},
        {20,20,20},
        {21,21,21},
        {22,22,22},
        {24,24,24},
        {25,25,25},
        {26,26,26},
        {28,28,28}, //20
        {29,29,29},
        {30,30,30},
        {31,31,31},
        {33,33,33},
        {34,34,34},
        {35,35,35},
        {37,37,37},
        {38,38,38},
        {39,39,39},
        {41,41,41}, //30
        {42,42,42},
        {43,43,43},
        {45,45,45},
        {46,46,46},
        {47,47,47},
        {49,49,49},
        {50,50,50},
        {51,51,51},
        {52,52,52},
        {54,54,54}, //40
        {55,55,55},
        {56,56,56},
        {58,58,58},
        {59,59,59},
        {60,60,60},
        {62,62,62},
        {63,63,63},
        {64,64,64},
        {66,66,66},
        {67,67,67}, //50
        {68,68,68},
        {70,70,70},
        {71,71,71},
        {72,72,72},
        {73,73,73},
        {75,75,75},
        {76,76,76},
        {77,77,77},
        {79,79,79},
        {80,80,80}, //60
        {81,81,81},
        {83,83,83},
        {84,84,84},
        {85,85,85},
        {87,87,87},
        {88,88,88},
        {89,89,89},
        {91,91,91},
        {92,92,92},
        {93,93,93}, //70
        {94,94,94},
        {96,96,96},
        {97,97,97},
        {98,98,98},
        {100,100,100},
        {101,101,101},
        {102,102,102},
        {104,104,104},
        {105,105,105},
        {106,106,106}, //80
        {108,108,108},
        {109,109,109},
        {110,110,110},
        {112,112,112},
        {113,113,113},
        {114,114,114},
        {115,115,115},
        {117,117,117},
        {118,118,118},
        {119,119,119}, //90
        {121,121,121},
        {122,122,122},
        {123,123,123},
        {125,125,125},
        {126,126,126},
        {127,127,127},
        {129,129,129},
        {130,130,130},
        {131,131,131},
        {133,133,133}, //100
        {134,134,134},
        {135,135,135},
        {136,136,136},
        {138,138,138},
        {139,139,139},
        {140,140,140},
        {142,142,142},
        {143,143,143},
        {144,144,144},
        {146,146,146}, //110
        {147,147,147},
        {148,148,148},
        {150,150,150},
        {151,151,151},
        {152,152,152},
        {154,154,154},
        {155,155,155},
        {156,156,156},
        {157,157,157},
        {159,159,159}, //120
        {160,160,160},
        {161,161,161},
        {163,163,163},
        {164,164,164},
        {165,165,165},
        {167,167,167},
        {168,168,168},
        {169,169,169},
        {171,171,171},
        {172,172,172}, //130
        {173,173,173},
        {175,175,175},
        {176,176,176},
        {177,177,177},
        {178,178,178},
        {180,180,180},
        {181,181,181},
        {182,182,182},
        {184,184,184},
        {185,185,185}, //140
        {186,186,186},
        {188,188,188},
        {189,189,189},
        {190,190,190},
        {192,192,192},
        {193,193,193},
        {194,194,194},
        {196,196,196},
        {197,197,197},
        {198,198,198}, //150
        {199,199,199},
        {201,201,201},
        {202,202,202},
        {203,203,203},
        {205,205,205},
        {206,206,206},
        {207,204,204},
        {207,202,202},
        {208,200,200},
        {208,198,198}, //160
        {209,196,196},
        {209,194,194},
        {210,192,192},
        {210,190,190},
        {211,187,187},
        {211,185,185},
        {212,183,183},
        {212,181,181},
        {213,179,179},
        {213,177,177}, //170
        {214,175,175},
        {214,173,173},
        {215,171,171},
        {215,169,169},
        {216,167,167},
        {216,165,165},
        {217,163,163},
        {217,161,161},
        {218,159,159},
        {218,157,157}, //180
        {219,155,155},
        {219,152,152},
        {220,150,150},
        {220,148,148},
        {221,146,146},
        {221,144,144},
        {222,142,142},
        {222,140,140},
        {223,138,138},
        {223,136,136}, //190
        {224,134,134},
        {224,132,132},
        {225,130,130},
        {225,128,128},
        {226,126,126},
        {226,124,124},
        {227,122,122},
        {227,119,119},
        {228,117,117},
        {228,115,115}, //200
        {229,113,113},
        {229,111,111},
        {230,109,109},
        {230,107,107},
        {231,105,105},
        {231,103,103},
        {232,101,101},
        {232,99,99},
        {233,97,97},
        {233,95,95}, //210
        {234,93,93},
        {234,91,91},
        {235,89,89},
        {235,87,87},
        {236,84,84},
        {236,82,82},
        {237,80,80},
        {237,78,78},
        {238,76,76},
        {238,74,74}, //220
        {239,72,72},
        {239,70,70},
        {240,68,68},
        {240,66,66},
        {241,64,64},
        {241,62,62},
        {242,60,60},
        {242,58,58},
        {243,56,56},
        {243,54,54}, //230
        {244,52,52},
        {244,49,49},
        {245,47,47},
        {245,45,45},
        {246,43,43},
        {246,41,41},
        {247,39,39},
        {247,37,37},
        {248,35,35},
        {248,33,33}, //240
        {249,31,31},
        {249,29,29},
        {250,27,27},
        {250,25,25},
        {251,23,23},
        {251,21,21},
        {252,19,19},
        {252,16,16},
        {253,14,14},
        {253,12,12}, //250
        {254,10,10},
        {254,8,8},
        {255,6,6},
        {255,4,4},
        {255,2,2}
        };
// 暗淡
    private static final short [][]DimTable = {
        {0,0,0},
        {0,0,0},
        {0,0,0},
        {0,0,0},
        {0,0,0},
        {0,0,0},
        {0,8,8},
        {0,8,8},
        {0,8,8},
        {0,8,8},
        {0,8,8}, //10
        {8,16,16},
        {8,16,16},
        {8,16,16},
        {8,16,16},
        {8,16,16},
        {8,24,24},
        {8,24,24},
        {8,24,24},
        {8,24,24},
        {8,24,24}, //20
        {8,24,24},
        {16,33,33},
        {16,33,33},
        {16,33,33},
        {16,33,33},
        {16,33,33},
        {16,41,41},
        {16,41,41},
        {16,41,41},
        {16,41,41}, //30
        {16,41,41},
        {24,49,49},
        {24,49,49},
        {24,49,49},
        {24,49,49},
        {24,49,49},
        {24,49,49},
        {24,57,57},
        {24,57,57},
        {24,57,57}, //40
        {24,57,57},
        {24,57,57},
        {33,66,66},
        {33,66,66},
        {33,66,66},
        {33,66,66},
        {33,66,66},
        {33,74,74},
        {33,74,74},
        {33,74,74}, //50
        {33,74,74},
        {33,74,74},
        {33,74,74},
        {41,82,82},
        {41,82,82},
        {41,82,82},
        {41,82,82},
        {41,82,82},
        {41,90,90},
        {41,90,90}, //60
        {41,90,90},
        {41,90,90},
        {41,90,90},
        {49,99,99},
        {49,99,99},
        {49,99,99},
        {49,99,99},
        {49,99,99},
        {49,99,99},
        {49,107,107}, //70
        {49,107,107},
        {49,107,107},
        {49,107,107},
        {49,107,107},
        {57,115,115},
        {57,115,115},
        {57,115,115},
        {57,115,115},
        {57,115,115},
        {57,123,123}, //80
        {57,123,123},
        {57,123,123},
        {57,123,123},
        {57,123,123},
        {66,132,132},
        {66,132,123},
        {66,132,123},
        {66,132,123},
        {74,132,123},
        {74,132,123}, //90
        {74,140,115},
        {74,140,115},
        {82,140,115},
        {82,140,115},
        {82,140,115},
        {90,148,115},
        {90,148,107},
        {90,148,107},
        {90,148,107},
        {99,148,107}, //100
        {99,148,107},
        {99,156,99},
        {107,156,99},
        {107,156,99},
        {107,156,99},
        {107,156,99},
        {115,165,90},
        {115,165,90},
        {115,165,90},
        {123,165,90}, //110
        {123,165,90},
        {123,173,90},
        {123,173,82},
        {132,173,82},
        {132,173,82},
        {132,173,82},
        {132,173,82},
        {140,181,74},
        {140,181,74},
        {140,181,74}, //120
        {148,181,74},
        {148,181,74},
        {148,189,66},
        {148,189,66},
        {156,189,66},
        {156,189,66},
        {156,189,66},
        {165,198,66},
        {165,198,57},
        {165,198,57}, //130
        {165,198,57},
        {173,198,57},
        {173,198,57},
        {173,206,57},
        {181,206,49},
        {181,206,49},
        {181,206,49},
        {181,206,49},
        {189,214,41},
        {189,214,41}, //140
        {189,214,41},
        {198,214,41},
        {198,214,41},
        {198,222,41},
        {198,222,33},
        {206,222,33},
        {206,222,33},
        {206,222,33},
        {206,222,33},
        {214,231,24}, //150
        {214,231,24},
        {214,231,24},
        {222,231,24},
        {222,231,24},
        {222,239,16},
        {222,239,16},
        {231,239,16},
        {231,239,16},
        {231,239,16},
        {239,247,16}, //160
        {239,247,8},
        {239,247,8},
        {239,247,8},
        {247,247,8},
        {247,247,8},
        {247,255,0},
        {255,255,0},
        {255,255,0},
        {255,255,0},
        {255,255,0}, //170
        {255,255,0},
        {255,255,0},
        {255,247,0},
        {255,247,0},
        {255,247,0},
        {255,239,0},
        {255,239,0},
        {255,231,0},
        {255,231,0},
        {255,231,0}, //180
        {255,222,0},
        {255,222,0},
        {255,222,0},
        {255,214,0},
        {255,214,0},
        {255,206,0},
        {255,206,0},
        {255,206,0},
        {255,198,0},
        {255,198,0}, //190
        {255,198,0},
        {255,189,0},
        {255,189,0},
        {255,181,0},
        {255,181,0},
        {255,181,0},
        {255,173,0},
        {255,173,0},
        {255,173,0},
        {255,165,0}, //200
        {255,165,0},
        {255,156,0},
        {255,156,0},
        {255,156,0},
        {255,148,0},
        {255,148,0},
        {255,148,0},
        {255,140,0},
        {255,140,0},
        {255,132,0}, //210
        {255,132,0},
        {255,132,0},
        {255,123,0},
        {255,123,0},
        {255,123,0},
        {255,115,0},
        {255,115,0},
        {255,107,0},
        {255,107,0},
        {255,107,0}, //220
        {255,99,0},
        {255,99,0},
        {255,99,0},
        {255,90,0},
        {255,90,0},
        {255,82,0},
        {255,82,0},
        {255,82,0},
        {255,74,0},
        {255,74,0}, //230
        {255,74,0},
        {255,66,0},
        {255,66,0},
        {255,57,0},
        {255,57,0},
        {255,57,0},
        {255,49,0},
        {255,49,0},
        {255,49,0},
        {255,41,0}, //240
        {255,41,0},
        {255,33,0},
        {255,33,0},
        {255,33,0},
        {255,24,0},
        {255,24,0},
        {255,24,0},
        {255,16,0},
        {255,16,0},
        {255,8,0}, //250
        {255,8,0},
        {255,8,0},
        {255,0,0},
        {255,0,0},
        {255,0,0}
        };
// 艳丽
    private static final short [][]GorgeousTable = {
        {0,0,7},
        {0,0,14},
        {0,0,21},
        {0,0,28},
        {0,0,35},
        {0,0,43},
        {0,0,50},
        {0,0,57},
        {0,0,64},
        {0,0,71},
        {0,0,78}, //10
        {0,0,85},
        {0,0,92},
        {0,0,99},
        {0,0,106},
        {0,0,113},
        {0,0,120},
        {0,0,128},
        {0,0,135},
        {0,0,142},
        {0,0,149}, //20
        {0,0,156},
        {0,0,163},
        {0,0,170},
        {0,0,177},
        {0,0,184},
        {0,0,191},
        {0,0,198},
        {0,0,205},
        {0,0,213},
        {0,0,220}, //30
        {0,0,227},
        {0,0,234},
        {0,0,241},
        {0,0,248},
        {0,0,255},
        {0,7,248},
        {0,14,241},
        {0,21,234},
        {0,28,227},
        {0,35,220}, //40
        {0,43,212},
        {0,50,205},
        {0,57,198},
        {0,64,191},
        {0,71,184},
        {0,78,177},
        {0,85,170},
        {0,92,163},
        {0,99,156},
        {0,106,149}, //50
        {0,113,142},
        {0,120,135},
        {0,128,127},
        {0,135,120},
        {0,142,113},
        {0,149,106},
        {0,156,99},
        {0,163,92},
        {0,170,85},
        {0,177,78}, //60
        {0,184,71},
        {0,191,64},
        {0,198,57},
        {0,205,50},
        {0,213,42},
        {0,220,35},
        {0,227,28},
        {0,234,21},
        {0,241,14},
        {0,248,7}, //70
        {0,255,0},
        {0,255,7},
        {0,255,14},
        {0,255,21},
        {0,255,28},
        {0,255,35},
        {0,255,43},
        {0,255,50},
        {0,255,57},
        {0,255,64}, //80
        {0,255,71},
        {0,255,78},
        {0,255,85},
        {0,255,92},
        {0,255,99},
        {0,255,106},
        {0,255,113},
        {0,255,120},
        {0,255,128},
        {0,255,135}, //90
        {0,255,142},
        {0,255,149},
        {0,255,156},
        {0,255,163},
        {0,255,170},
        {0,255,177},
        {0,255,184},
        {0,255,191},
        {0,255,198},
        {0,255,205}, //100
        {0,255,213},
        {0,255,220},
        {0,255,227},
        {0,255,234},
        {0,255,241},
        {0,255,248},
        {0,255,255},
        {7,248,255},
        {14,241,255},
        {21,234,255}, //110
        {28,227,255},
        {35,220,255},
        {43,212,255},
        {50,205,255},
        {57,198,255},
        {64,191,255},
        {71,184,255},
        {78,177,255},
        {85,170,255},
        {92,163,255}, //120
        {99,156,255},
        {106,149,255},
        {113,142,255},
        {120,135,255},
        {128,127,255},
        {135,120,255},
        {142,113,255},
        {149,106,255},
        {156,99,255},
        {163,92,255}, //130
        {170,85,255},
        {177,78,255},
        {184,71,255},
        {191,64,255},
        {198,57,255},
        {205,50,255},
        {213,42,255},
        {220,35,255},
        {227,28,255},
        {234,21,255}, //140
        {241,14,255},
        {248,7,255},
        {255,0,255},
        {255,0,248},
        {255,0,241},
        {255,0,234},
        {255,0,227},
        {255,0,220},
        {255,0,212},
        {255,0,205}, //150
        {255,0,198},
        {255,0,191},
        {255,0,184},
        {255,0,177},
        {255,0,170},
        {255,0,163},
        {255,0,156},
        {255,0,149},
        {255,0,142},
        {255,0,135}, //160
        {255,0,127},
        {255,0,120},
        {255,0,113},
        {255,0,106},
        {255,0,99},
        {255,0,92},
        {255,0,85},
        {255,0,78},
        {255,0,71},
        {255,0,64}, //170
        {255,0,57},
        {255,0,50},
        {255,0,42},
        {255,0,35},
        {255,0,28},
        {255,0,21},
        {255,0,14},
        {255,0,7},
        {255,0,0},
        {255,7,0}, //180
        {255,14,0},
        {255,21,0},
        {255,28,0},
        {255,35,0},
        {255,43,0},
        {255,50,0},
        {255,57,0},
        {255,64,0},
        {255,71,0},
        {255,78,0}, //190
        {255,85,0},
        {255,92,0},
        {255,99,0},
        {255,106,0},
        {255,113,0},
        {255,120,0},
        {255,128,0},
        {255,135,0},
        {255,142,0},
        {255,149,0}, //200
        {255,156,0},
        {255,163,0},
        {255,170,0},
        {255,177,0},
        {255,184,0},
        {255,191,0},
        {255,198,0},
        {255,205,0},
        {255,213,0},
        {255,220,0}, //210
        {255,227,0},
        {255,234,0},
        {255,241,0},
        {255,248,0},
        {255,255,0},
        {255,255,7},
        {255,255,14},
        {255,255,21},
        {255,255,28},
        {255,255,35}, //220
        {255,255,43},
        {255,255,50},
        {255,255,57},
        {255,255,64},
        {255,255,71},
        {255,255,78},
        {255,255,85},
        {255,255,92},
        {255,255,99},
        {255,255,106}, //230
        {255,255,113},
        {255,255,120},
        {255,255,128},
        {255,255,135},
        {255,255,142},
        {255,255,149},
        {255,255,156},
        {255,255,163},
        {255,255,170},
        {255,255,177}, //240
        {255,255,184},
        {255,255,191},
        {255,255,198},
        {255,255,205},
        {255,255,213},
        {255,255,220},
        {255,255,227},
        {255,255,234},
        {255,255,241},
        {255,255,248}, //250
        {255,255,255},
        {255,255,255},
        {255,255,255},
        {255,255,255},
        {255,255,255},
        };
// 黑热
    private static final short [][]BlackFeverTable = {
        {255,255,255},
        {254,254,254},
        {253,253,253},
        {252,252,252},
        {251,251,251},
        {250,250,250},
        {249,249,249},
        {248,248,248},
        {247,247,247},
        {246,246,246},
        {245,245,245}, //10
        {244,244,244},
        {243,243,243},
        {242,242,242},
        {241,241,241},
        {240,240,240},
        {239,239,239},
        {238,238,238},
        {237,237,237},
        {236,236,236},
        {235,235,235}, //20
        {234,234,234},
        {233,233,233},
        {232,232,232},
        {231,231,231},
        {230,230,230},
        {229,229,229},
        {228,228,228},
        {227,227,227},
        {226,226,226},
        {225,225,225}, //30
        {224,224,224},
        {223,223,223},
        {222,222,222},
        {221,221,221},
        {220,220,220},
        {219,219,219},
        {218,218,218},
        {217,217,217},
        {216,216,216},
        {215,215,215}, //40
        {214,214,214},
        {213,213,213},
        {212,212,212},
        {211,211,211},
        {210,210,210},
        {209,209,209},
        {208,208,208},
        {207,207,207},
        {206,206,206},
        {205,205,205}, //50
        {204,204,204},
        {203,203,203},
        {202,202,202},
        {201,201,201},
        {200,200,200},
        {199,199,199},
        {198,198,198},
        {197,197,197},
        {196,196,196},
        {195,195,195}, //60
        {194,194,194},
        {193,193,193},
        {192,192,192},
        {191,191,191},
        {190,190,190},
        {189,189,189},
        {188,188,188},
        {187,187,187},
        {186,186,186},
        {185,185,185}, //70
        {184,184,184},
        {183,183,183},
        {182,182,182},
        {181,181,181},
        {180,180,180},
        {179,179,179},
        {178,178,178},
        {177,177,177},
        {176,176,176},
        {175,175,175}, //80
        {174,174,174},
        {173,173,173},
        {172,172,172},
        {171,171,171},
        {170,170,170},
        {169,169,169},
        {168,168,168},
        {167,167,167},
        {166,166,166},
        {165,165,165}, //90
        {164,164,164},
        {163,163,163},
        {162,162,162},
        {161,161,161},
        {160,160,160},
        {159,159,159},
        {158,158,158},
        {157,157,157},
        {156,156,156},
        {155,155,155}, //100
        {154,154,154},
        {153,153,153},
        {152,152,152},
        {151,151,151},
        {150,150,150},
        {149,149,149},
        {148,148,148},
        {147,147,147},
        {146,146,146},
        {145,145,145}, //110
        {144,144,144},
        {143,143,143},
        {142,142,142},
        {141,141,141},
        {140,140,140},
        {139,139,139},
        {138,138,138},
        {137,137,137},
        {136,136,136},
        {135,135,135}, //120
        {134,134,134},
        {133,133,133},
        {132,132,132},
        {131,131,131},
        {130,130,130},
        {129,129,129},
        {128,128,128},
        {127,127,127},
        {126,126,126},
        {125,125,125}, //130
        {124,124,124},
        {123,123,123},
        {122,122,122},
        {121,121,121},
        {120,120,120},
        {119,119,119},
        {118,118,118},
        {117,117,117},
        {116,116,116},
        {115,115,115}, //140
        {114,114,114},
        {113,113,113},
        {112,112,112},
        {111,111,111},
        {110,110,110},
        {109,109,109},
        {108,108,108},
        {107,107,107},
        {106,106,106},
        {105,105,105}, //150
        {104,104,104},
        {103,103,103},
        {102,102,102},
        {101,101,101},
        {100,100,100},
        {99,99,99},
        {98,98,98},
        {97,97,97},
        {96,96,96},
        {95,95,95}, //160
        {94,94,94},
        {93,93,93},
        {92,92,92},
        {91,91,91},
        {90,90,90},
        {89,89,89},
        {88,88,88},
        {87,87,87},
        {86,86,86},
        {85,85,85}, //170
        {84,84,84},
        {83,83,83},
        {82,82,82},
        {81,81,81},
        {80,80,80},
        {79,79,79},
        {78,78,78},
        {77,77,77},
        {76,76,76},
        {75,75,75}, //180
        {74,74,74},
        {73,73,73},
        {72,72,72},
        {71,71,71},
        {70,70,70},
        {69,69,69},
        {68,68,68},
        {67,67,67},
        {66,66,66},
        {65,65,65}, //190
        {64,64,64},
        {63,63,63},
        {62,62,62},
        {61,61,61},
        {60,60,60},
        {59,59,59},
        {58,58,58},
        {57,57,57},
        {56,56,56},
        {55,55,55}, //200
        {54,54,54},
        {53,53,53},
        {52,52,52},
        {51,51,51},
        {50,50,50},
        {49,49,49},
        {48,48,48},
        {47,47,47},
        {46,46,46},
        {45,45,45},
        {44,44,44},
        {43,43,43},
        {42,42,42},
        {41,41,41},
        {40,40,40},
        {39,39,39},
        {38,38,38},
        {37,37,37},
        {36,36,36},
        {35,35,35},
        {34,34,34},
        {33,33,33},
        {32,32,32},
        {31,31,31},
        {30,30,30},
        {29,29,29},
        {28,28,28},
        {27,27,27},
        {26,26,26},
        {25,25,25},
        {24,24,24},
        {23,23,23},
        {22,22,22},
        {21,21,21},
        {20,20,20},
        {19,19,19},
        {18,18,18},
        {17,17,17},
        {16,16,16},
        {15,15,15},
        {14,14,14},
        {13,13,13},
        {12,12,12},
        {11,11,11},
        {10,10,10},
        {9,9,9},
        {8,8,8},
        {7,7,7},
        {6,6,6},
        {5,5,5},
        {4,4,4},
        {3,3,3},
        {2,2,2},
        {1,1,1},
        {0,0,0}

};


    // //环温15度
    // private static final float []Env15Table = {
    //     34.4, 	34.5, 	34.6, 	34.7, 	34.8, 	34.9, 	35.0, 	35.1, 	35.2, 	35.3,
    //     35.4, 	35.5, 	35.6, 	35.7, 	35.8, 	35.8, 	35.9, 	36.0, 	36.1, 	36.2, 
    //     36.3, 	36.4, 	36.5, 	36.6, 	36.7, 	36.8, 	36.9, 	37.0, 	37.1, 	37.2, 
    //     37.3 	37.4 	37.5 	37.6 	37.7 	37.8 	37.9 	38.0 	38.1 	38.2 
    //     38.3 	38.4 	38.5 	38.6 	38.7 	38.8 	38.9 	38.9 	38.9 	39.0 
    //     39.0 	39.0 	39.1 	39.1 	39.1 	39.2 	39.2 	39.2 	39.3 	39.4 
    //     39.5 	39.6 	39.7 	39.8 	39.9 	40.0 	40.1 	40.2 	40.3 	40.4 
    //     40.5 	40.6 	40.7 	40.8 	40.9 	41.0 	41.1 	41.2 	41.3 	41.4 
    //     41.5 	41.6 	41.7 	41.8 	41.9 	42.0 	42.1 	42.2 	42.3 	42.4 

    // };
    // //环温16度
    // private static final float []Env16Table = {

    // };
    // //环温17度
    // private static final float []Env17Table = {
        
    // };
    // //环温18度
    // private static final float []Env18Table = {
        
    // };
    // //环温19度
    // private static final float []Env19Table = {
        
    // };
    // //环温20度
    // private static final float []Env20Table = {
        
    // };
    // //环温21度
    // private static final float []Env21Table = {
        
    // };
    // //环温22度
    // private static final float []Env22Table = {
        
    // };
    // //环温23度
    // private static final float []Env23Table = {
        
    // };
    // //环温24度
    // private static final float []Env24Table = {
        
    // };
    // //环温25度
    // private static final float []Env25Table = {
        
    // };
    // //环温26度
    // private static final float []Env26Table = {
        
    // };
    // //环温27度
    // private static final float []Env27Table = {
        
    // };
    // //环温28度
    // private static final float []Env28Table = {
        
    // };
    // //环温29度
    // private static final float []Env29Table = {
        
    // };
    // //环温30度
    // private static final float []Env30Table = {
        
    // };
    // //环温31度
    // private static final float []Env31Table = {
         
    // };
    // //环温32度
    // private static final float []Env32Table = {
        
    // };
    // //环温33度
    // private static final float []Env33Table = {
        
    // };
    // //环温34度
    // private static final float []Env34Table = {
        
    // };
    // //环温35度
    // private static final float []Env35Table = {
        
    // };
    // //环温36度
    // private static final float []Env36Table = {
        
    // };
    // //环温37度
    // private static final float []Env37Table = {
        
    // };
    // //环温38度
    // private static final float []Env38Table = {
        
    // };
    // //环温39度
    // private static final float []Env39Table = {
        
    // };

    private static final float [][]EnvKBTable = {
        {0.9f, 7.4f},
        {0.9f, 7.2f},
        {8.0f/9, 7.3333333f},
        {7.9f/9, 7.5666666f},
        {7.9f/9, 7.3666666f},
        {7.9f/9, 7.1666666f},
        {7.8f/9, 7.3f},
        {7.8f/9, 7.1f},
        {7.8f/9, 6.9f},
        {7.8f/9, 6.8f},
        {7.9f/9, 6.3666666f},
        {7.9f/9, 6.2666666f},
        {7.9f/9, 6.1666666f},
        {7.9f/9, 6.0666666f},
        {7.9f/9, 5.9666666f},
        {8.0f/9, 5.5333333f},
        {8.0f/9, 5.4333333f},
        {8.0f/9, 5.3333333f},
        {8.0f/9, 5.2333333f},
        {8.0f/9, 5.1333333f},
        {8.1f/9, 4.7f},
        {8.1f/9, 4.6f},
        {8.1f/9, 4.5f},
        {8.1f/9, 4.4f},
        {8.2f/9, 3.9666666f}
    };
    




    // private static byte[] mOriImgBytes;//原始数据
    private static short[] histogramBuffer;
    private static int[] mColorImgBytes;//伪彩色数据
    private static short[] mTemperature;//温度数据,一个温度数据需要16位保存
    private static short[] mOriImgShorts;//原始数据
    private static float mMaxTemperature = 0;   //最高温度，注意需要除以16得到最终温度，1表示1/16温度单位
    private static float mMinTemperature = 0;   //最低温度，注意需要除以16得到最终温度，1表示1/16温度单位
    public static class MyPoint{
        public int x,y;

        public MyPoint(){
            x = 0;
            y = 0;
        }
    }

    public static class Template{
        public float min,max,aval;

    }



    private static MyPoint maxPoint = new MyPoint();    //最高温度坐标，
    private static MyPoint minPoint = new MyPoint();    //最低温度坐标，
    private static int filterKSize = 5;
    private static int filterTSize = 5;
    // private static int filterTIndex = 0;
    // private static int[][] mTemperatureFilterBuffer = new int[5][256 * 192]; //温度取5帧的平均值  具体是多少帧可以用 filterTSize来表示
    //leo
    private static int[] mTemperatureFilterBufferResult = new int[256 * 192]; //温度取5帧的平均值  具体是多少帧可以用 filterTSize来表示
  //  private static int[] mTemperatureFilterBufferResult = new int[160 * 120]; //温度取5帧的平均值  具体是多少帧可以用 filterTSize来表示

    //温度单位 默认摄氏度
    private static int mTemperatureMode = CentigradeMode;
    private static int mSensorMode = SensorTinyBE;
    //旋转模式，默认0
    private static int mRotateMode = Rotate_0;
    //伪彩模式，目前仅仅支持一种
    private static int mPseudoColorMode = WarmColor1;
    //原始图片宽高
    public static int mOriImgWidth = 256;
  //  public static int mOriImgWidth = 160;
    public static int mOriImgHeight = 384;
  //  public static int mOriImgHeight = 240;

    //伪彩温度图像宽高
    public static  int mPseudoColorImgWidth = 256;
  //  public static  int mPseudoColorImgWidth = 160;
    public static  int mPseudoColorImgHeight = 192;
  //  public static  int mPseudoColorImgHeight = 120;






    public  static void setImgBytes(byte[] oriImgBytes){

      // Log.e("UsbCmaeraCommon","start..........oriImgBytes:"+oriImgBytes.length);



        mOriImgShorts = bytesToShort(oriImgBytes);

        if(mTemperature == null)
            mTemperature = new short[mPseudoColorImgWidth * mPseudoColorImgHeight];
        if(mColorImgBytes == null)
            mColorImgBytes = new int[mPseudoColorImgWidth * mPseudoColorImgHeight];    //一个ARGB_8888占用4个字节
        if(histogramBuffer == null)
        {
        	histogramBuffer = new short[(TARTGET_TEMPERATURE_MAX - TARTGET_TEMPERATURE_MIN) / 2 + 1];
        }

        PseudoColorProcess();

        //显示数据
        if(mIColorImg != null){
            mIColorImg.show(mColorImgBytes);

            if(mTemperatureMode == KelvinMode)
            {
                mMinTemperature = (float) (mMinTemperature / 16.0);
                mMaxTemperature = (float) (mMaxTemperature / 16.0);
            }
            else if(mTemperatureMode == CentigradeMode)
            {
                mMinTemperature = (float) (mMinTemperature / 16.0 - 273.15);
                mMaxTemperature = (float) (mMaxTemperature / 16.0 - 273.15);
            }
            else if(mTemperatureMode == FahrenheitMode)
            {
                mMinTemperature = (float) (mMinTemperature / 16.0 - 459.625);
                mMaxTemperature = (float) (mMaxTemperature / 16.0 - 459.625);
            }


            //211202-注释1
        //    mMinTemperature = temperatureEnvCompensation(mMinTemperature);
        //    mMaxTemperature = temperatureEnvCompensation(mMaxTemperature);

          //  Log.e("temperaEnvCompensation","最低温:"+mMinTemperature+"   "+"最高温::"+mMaxTemperature);
           // Log.e("temperaEnvCompensation","补偿温度:最小"+envTMin+"   最大:"+envTMax);


            mIColorImg.showTemparate(mMinTemperature,mMaxTemperature);

            mIColorImg.showMaxOrMinTemparate(maxPoint,minPoint,mMinTemperature,mMaxTemperature);
        }



    }


    private static short[] shorts;

    public static short[] bytesToShort(byte[] bytes) {
        if(bytes==null){
            return null;
        }

       // Log.e("bytesToShort",bytes.length+"");

        if(shorts == null){
            shorts = new short[bytes.length/2];
        }
        ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN).asShortBuffer().get(shorts);

        // leo添加代码,在此直接将Y14转为Y8
        // int i = 0;
        // for(i=0; i<bytes.length/4;i++)
        // {
        //    // short shortTmp = (short)(shorts[i]>>6);
        //     shorts[i]=(short)(shorts[i]>>6);
        //    // shorts[i] = shortTmp;
        // }
        // leo添加代码结束

        return shorts;

    }
    /**
     * 设置传感器型号模式
     */
    public static void setSensorMode(int mode){
        mSensorMode = mode;
        
    }
    /**
     * 获取传感器型号模式
     */
    public static int getSensorMode(){
        return mSensorMode;
    }


    /**
     * 设置温度单位
     */
    public static void setmTemperatureMode(int mode){
        mTemperatureMode = mode;
    }

    /**
     * 设置伪彩模式
     */
    public static void setmPseudoColorMode(int mode){
        if((mode >= AdaptiveThreshold_1) && (mode <= BlackFever))
            mPseudoColorMode = mode;
    }





    public static void setOriImgSize(int width,int height){
        mOriImgWidth = width;
        mOriImgHeight = height;
        if((mRotateMode == Rotate_0) || (mRotateMode == Rotate_180))
        {
            mPseudoColorImgWidth = mOriImgWidth;
            mPseudoColorImgHeight = mOriImgHeight/2;

            mTemperature = new short[mPseudoColorImgWidth * mPseudoColorImgHeight];
            mColorImgBytes = new int[mPseudoColorImgWidth * mPseudoColorImgHeight];    //一个ARGB_8888占用4个字节

            // mTemperatureFilterBuffer = new int[filterTSize][mPseudoColorImgWidth * mPseudoColorImgHeight];
            // //leo
            mTemperatureFilterBufferResult = new int[mPseudoColorImgWidth * mPseudoColorImgHeight];
            // //led end
            // filterTIndex = 0;
        }
        else if((mRotateMode == Rotate_90) || (mRotateMode == Rotate_270))
        {
            mPseudoColorImgWidth =  mOriImgHeight/2;
            mPseudoColorImgHeight = mOriImgWidth;

            mTemperature = new short[mPseudoColorImgWidth * mPseudoColorImgHeight];
            mColorImgBytes = new int[mPseudoColorImgWidth * mPseudoColorImgHeight];    //一个ARGB_8888占用4个字节
            // mTemperatureFilterBuffer = new int[filterTSize][mPseudoColorImgWidth * mPseudoColorImgHeight];
            // //leo
            mTemperatureFilterBufferResult = new int[mPseudoColorImgWidth * mPseudoColorImgHeight];
            // //led end
            // filterTIndex = 0;
            // filterTIndex = 0;
        }

      //  Log.e("setOriImgSize",mPseudoColorImgWidth+  "  "+mPseudoColorImgHeight);
    }





    //ROI矩形类
    static class MyRect{
        public int x,y;
        public int width,height;

        public MyRect(){
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
        public MyRect(int xx, int yy, int w, int h){
            x = xx;
            y = yy;
            width = w;
            height = h;
        }

    }
    private static MyRect roiRect = new MyRect();
    private  static boolean  roiRectSetFlag = false;


    public static int getRotateMode(){
        return mRotateMode;
    }

    /**
     * 设置旋转模式
     */
    public static void setRotateMode(int mode){
        if(mRotateMode != mode)
        {
            // 旋转模式改变对应图像宽高改变
            if(((mRotateMode == Rotate_0) || (mRotateMode == Rotate_180)) && ((mode == Rotate_90) || (mode == Rotate_270)))
            {
                
                mPseudoColorImgWidth =  mOriImgHeight/2;
                mPseudoColorImgHeight = mOriImgWidth;
                // filterTIndex = 0;
            }
            else if(((mRotateMode == Rotate_90) || (mRotateMode == Rotate_270)) && ((mode == Rotate_0) || (mode == Rotate_180)))
            {
                mPseudoColorImgWidth = mOriImgWidth;
                mPseudoColorImgHeight = mOriImgHeight/2;
                // filterTIndex = 0;
            }
            mRotateMode = mode;
        }
        
    }
	/**
     * 设置水平镜像模式
     */
    public static void setMirrorHorizontallyMode(boolean mode){
        mMirrorHorizontallyMode = mode;
        
    }
	/**
     * 设置水平镜像模式
     */
    public static void setMirrorVerticallyMode(boolean mode){
        mMirrorVerticallyMode = mode;
        
    }
    // 设置伪彩处理模式
    public static void setPseudoColorMode(int mode){
        mPseudoColorMode = mode;
    }

    public static void PseudoColorProcess()
    {
        short yImgmax = 0;

        int r,g,b;
        int index = 0;
        int indexTmp = 0;

        for(int i=0; i<mOriImgHeight / 2; i++)
        {
            index = i * mOriImgWidth;
            indexTmp = index + mOriImgHeight * mOriImgWidth / 2;

            for(int j=0; j<mOriImgWidth; j++)
            {
            	if(mSensorMode == SensorTinyB)
            	{
            		yImgmax = (short)(yImgmax >> 6);
            	}
            	else if(mSensorMode == SensorTinyBE)
            	{
            		yImgmax = (mOriImgShorts[index]);
            		yImgmax=(short)(((int)yImgmax)&0xff);
            	}
                

                if((yImgmax >= 0) && (yImgmax <= 255))
                {
                    switch(mPseudoColorMode)
                    {
                        case WarmColor1:
                            r = WarmColor1Table[yImgmax][0];
                            g = WarmColor1Table[yImgmax][1];
                            b = WarmColor1Table[yImgmax][2];
                        break;
                        case WarmColor2:
                        r = WarmColor2Table[yImgmax][0];
                        g = WarmColor2Table[yImgmax][1];
                        b = WarmColor2Table[yImgmax][2];
                        break;
                        case Rainbow1:
                        r = Rainbow1Table[yImgmax][0];
                        g = Rainbow1Table[yImgmax][1];
                        b = Rainbow1Table[yImgmax][2];
                        break;
                        case Rainbow2:
                        r = Rainbow2Table[yImgmax][0];
                        g = Rainbow2Table[yImgmax][1];
                        b = Rainbow2Table[yImgmax][2];
                        break;
                        case Rainbow3:
                        r = Rainbow3Table[yImgmax][0];
                        g = Rainbow3Table[yImgmax][1];
                        b = Rainbow3Table[yImgmax][2];
                        break;
                        case RedFever:
                        r = RedFeverTable[yImgmax][0];
                        g = RedFeverTable[yImgmax][1];
                        b = RedFeverTable[yImgmax][2];
                        break;
                        case Dim:
                        r = DimTable[yImgmax][0];
                        g = DimTable[yImgmax][1];
                        b = DimTable[yImgmax][2];
                        break;
                        case Gorgeous:
                        r = GorgeousTable[yImgmax][0];
                        g = GorgeousTable[yImgmax][1];
                        b = GorgeousTable[yImgmax][2];
                        break;
                        case BlackFever:
                        r = BlackFeverTable[yImgmax][0];
                        g = BlackFeverTable[yImgmax][1];
                        b = BlackFeverTable[yImgmax][2];
                        break;
                        default:
                            r = 0;
                            g = 0;
                            b = 0;
                        break;
                    }
                }
                else
                {
                    r = 0;
                    g = 0;
                    b = 0;
                }



                short mTemperatureTmp = 0;
                if(mSensorMode == SensorTinyB)
                {
                	mTemperatureTmp = mOriImgShorts[indexTmp];
                }
                else if(mSensorMode == SensorTinyBE)
                {
                	mTemperatureTmp = (short) (mOriImgShorts[indexTmp] / 4);
                }

                if(mRotateMode == Rotate_0)
                {
					if(mMirrorHorizontallyMode == false)
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[index] = (255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[index] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[(mOriImgHeight / 2 - 1 - i) * mOriImgWidth + j] = (255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mOriImgHeight / 2 - 1 - i) * mOriImgWidth + j] = mTemperatureTmp;
						}
					}
					else
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[i * mOriImgWidth + mOriImgWidth - 1 - j] = (255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[i * mOriImgWidth + mOriImgWidth - 1 - j] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[(mOriImgHeight / 2 - 1 - i) * mOriImgWidth + mOriImgWidth - 1 - j] = (255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mOriImgHeight / 2 - 1 - i) * mOriImgWidth + mOriImgWidth - 1 - j] = mTemperatureTmp;
						}
					}
                    
                }
                else if(mRotateMode == Rotate_90)
                {
					if(mMirrorHorizontallyMode == false)
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[j * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[j * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[(mPseudoColorImgHeight - j-1) * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mPseudoColorImgHeight - j-1) * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = mTemperatureTmp;
						}
					}
                    else
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[j * mPseudoColorImgWidth + i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[j * mPseudoColorImgWidth + i] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[(mPseudoColorImgHeight - j-1) * mPseudoColorImgWidth + i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mPseudoColorImgHeight - j-1) * mPseudoColorImgWidth + i] = mTemperatureTmp;
						}
					}
                }
                else if(mRotateMode == Rotate_180)
                {
					if(mMirrorHorizontallyMode == false)
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[(mPseudoColorImgHeight - i-1) * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - j] =
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mPseudoColorImgHeight - i-1) * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - j] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[i * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - j] =
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[i * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - j] = mTemperatureTmp;
						}
					}
                    else
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[(mPseudoColorImgHeight - i-1) * mPseudoColorImgWidth + j] =
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mPseudoColorImgHeight - i-1) * mPseudoColorImgWidth + j] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[i * mPseudoColorImgWidth + j] =
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[i * mPseudoColorImgWidth + j] = mTemperatureTmp;
						}
					}
                }
                else if(mRotateMode == Rotate_270)
                {
					if(mMirrorHorizontallyMode == false)
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[(mPseudoColorImgHeight - 1 - j) * mPseudoColorImgWidth + i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mPseudoColorImgHeight - 1 - j) * mPseudoColorImgWidth + i] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[j * mPseudoColorImgWidth + i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[j * mPseudoColorImgWidth + i] = mTemperatureTmp;
						}
					}
					else
					{
						if(mMirrorVerticallyMode == false)
						{
							mColorImgBytes[(mPseudoColorImgHeight - 1 - j) * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[(mPseudoColorImgHeight - 1 - j) * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = mTemperatureTmp;
						}
						else
						{
							mColorImgBytes[j * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = 
								(255 << 24) | ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
							mTemperature[j * mPseudoColorImgWidth + mPseudoColorImgWidth - 1 - i] = mTemperatureTmp;
						}
					}
                    
                }

                index++;
                indexTmp++;
            }
        }

        temperatureFilter();
    }

    public static void setRoiRect(int x, int y, int width, int height)
    {
        if(width >= 0)
        {
            roiRect.x = x;
            roiRect.width = width;
        }
        else
        {
            if((x + width) >= 0)
            {
                roiRect.x = x + width;
                roiRect.width = 0 - width;
            }
            else
            {
                roiRect.x = 0;
                roiRect.width = 0 - width;
            }
        }
        if(height >= 0)
        {
            roiRect.y = y;        
            roiRect.height = height;
        }
        else
        {
            if((y + height) >= 0)
            {
                roiRect.y = y + height;
                roiRect.height = 0 - height;
            }
            else
            {
                roiRect.y = 0;
                roiRect.height = 0 - height;
            }
        }
        if((x != 0) || (y != 0) || (width != 0) || (height != 0))
        {
            roiRectSetFlag = true;
        }        
    }

    public static void temperatureFilter()
    {
        mMaxTemperature = 0;
        mMinTemperature = 32767;

        short tmp;

        if(roiRectSetFlag)
        {
            int yStart, yStop;
            int xStart, xStop;
            if(filterKSize > roiRect.y)
                yStart = filterKSize;
            else
                yStart = roiRect.y;
            if((roiRect.y + roiRect.height) < (mPseudoColorImgHeight-filterKSize))
            {
                yStop = roiRect.y + roiRect.height;
            }
            else 
            {
                yStop = mPseudoColorImgHeight-filterKSize;
            }

            if(filterKSize > roiRect.x)
                xStart = filterKSize;
            else
                xStart = roiRect.y;
            if((roiRect.x + roiRect.width) < (mPseudoColorImgWidth - filterKSize))
            {
                xStop = roiRect.x + roiRect.width;
            }
            else 
            {
                xStop = mPseudoColorImgWidth-filterKSize;
            }

            for(int i=yStart; i<yStop; i++)
            {
                for(int j=xStart; j<xStop; j++)
                {

                	tmp = mTemperature[i*mPseudoColorImgWidth + j];

                    if(tmp > mMaxTemperature)
                    {
                        mMaxTemperature = (short) tmp;
                        maxPoint.x = j;
                        maxPoint.y = i;
                    }

                    if(tmp < mMinTemperature)
                    {
                        mMinTemperature = (short) tmp;
                        minPoint.x = j;
                        minPoint.y = i;
                    }
                }
            }
        }
        else
        {
            for(int i=0; i<mPseudoColorImgHeight; i++)
            {
                for(int j=0; j<mPseudoColorImgWidth; j++)
                {
                    tmp = mTemperature[i*mPseudoColorImgWidth + j];

                    if(tmp > mMaxTemperature)
                    {
                        mMaxTemperature = (short) tmp;
                        maxPoint.x = j;
                        maxPoint.y = i;
                    }

                    if(tmp < mMinTemperature)
                    {
                        mMinTemperature = (short) tmp;
                        minPoint.x = j;
                        minPoint.y = i;
                    }
                }
            }
        }
    }



    /**
     * 根据传过来的坐标进行计算温度的获取
     * @param x
     * @param y
     * @return
     */
    public static float fliterTempate(int x,int y){
        if(mTemperature == null){
            return 0;
        }




        float sum = (float) (mTemperature[y*mPseudoColorImgWidth + x] / 16.0);
        if(mTemperatureMode == KelvinMode)
        {
            sum = sum;
        }
        else if(mTemperatureMode == CentigradeMode)
        {
            sum = (float) (sum - 273.15);
        }
        else if(mTemperatureMode == FahrenheitMode)
        {
            sum = (float) (sum * 1.8 - 459.625);
        }

        return  sum;
        // leo end
    }


    /**
     * x<256 y<192 获取某个矩形区域的最小值
     * @param x
     * @param y
     * dx:宽度  dy:高度(x,y为起始点坐标 矩形框左上角坐标)
     * @return
     */
    public static float getMinTemplate(int x,int y,int dx,int dy){



        int startx = x,startY = y;


        int endx = x + dx,endy = y+dy;

        if(endx > mPseudoColorImgWidth || endx < 0 || endy>mPseudoColorImgHeight || endy < 0){
            return  -1;
        }

        if(startx <= -1){
            startx = 0;
        }

        if(startY <= -1){
            startY = 0;
        }

        float min = fliterTempate(startx,startY);
        for(int i =startx ;i < endx;i++){
            for(int j = startY;j < endy ;j++){
                if(min > fliterTempate(i,j) && (i!=0 &&j!=0)){//忽略0,0
                    min = fliterTempate(i,j);
                }
            }

        }

        return  min;
    }


    /**
     * 获取某个矩形区域的最大值
     * @param x
     * @param y
     * @return
     */
    public static  float getMaxTemplate(int x,int y,int dx,int dy){




        int startx = x,startY = y;
        int endx = x + dx,endy = y+dy;

        if(endx > mPseudoColorImgWidth || endx < 0 || endy>mPseudoColorImgHeight || endy < 0){
            return  -1;
        }

        float max = fliterTempate(startx,startY);

        for(int i = startx ;i < endx;i++){

            for(int j = startY;j < endy ;j++){
                if(max < fliterTempate(i,j)){
                    max = fliterTempate(i,j);
                }
            }

        }
        Temperature = max;
        return  max;
    }


    /**
     * 获取矩形区域温度的平均值
     * @param x
     * @param y
     * @return
     */
    public static float getAvalTemplate(int x,int y,int dx,int dy){


        float sum  = 0;
        int startx = x,startY = y;
        int endx = x + dx,endy = y+dy;

        if(endx > mPseudoColorImgWidth || endx < 0 || endy>mPseudoColorImgHeight || endy < 0){
            return  -1;
        }

        for(int i = startx ;i < endx;i++){

            for(int j = startY;j < endy ;j++){
                sum += fliterTempate(i,j);
            }

        }

        return  sum/(dx*dy);

    }

    // static  MyRect faceRect = new MyRect();
    //ROI矩形类
    static class FaceTemperatureInfo{
        public int faceId;
        float temperatureRaw = 0.0f;
        int temperatureCnt = 0;
        float temperatureSum = 0.0f;
        float temperatureBuffer[] = new float[5];
        float temperatureBufferIndex;
        // int wPercents;
        public  MyRect faceRect = new MyRect();

        public FaceTemperatureInfo(){
            faceId = -1;
            // wPercents = 0;
            temperatureBufferIndex = 0;
            temperatureCnt = 0;

        }
        public FaceTemperatureInfo(int id, int xx, int yy, int w, int h){
            faceId = id;
            faceRect.x = xx;
            faceRect.y = yy;
            faceRect.width = w;
            faceRect.height = h;
            temperatureBufferIndex = 0;
            temperatureCnt = 0;
            // if(mPseudoColorImgWidth > 0)
            // {
            // 	wPercents = w * 200 / mPseudoColorImgWidth;
            // }
            // else
            // {
            // 	wPercents = 0;
            // }
        }

    }
    public static Vector<FaceTemperatureInfo> FaceTemperatureInfoList = new Vector<FaceTemperatureInfo>();
    public static Vector<FaceTemperatureInfo> FaceTemperatureInfoHistList = new Vector<FaceTemperatureInfo>();
    /**
     * 获取最大  最小  平均温度
     * @param x
     * @param y
     * @return
     */
    public static Template getTemplateInfo(int x,int y,int dx,int dy){



        int startx = x,startY = y;
        int endx = x + dx,endy = y+dy;



        if(endx > mPseudoColorImgWidth || endx < 0 || endy>mPseudoColorImgHeight || endy < 0){
            return  new Template();
        }

        if(startx <= -1){
            startx = 0;
        }

        if(startY <= -1){
            startY = 0;
        }


        Template template = new Template();

        //leo end

        float max = 0f,min = 32767.0f,aval = 0f;

        for(int i = startx ;i < endx;i++){

            for(int j = startY;j < endy ;j++){
                if(max < mTemperature[j*mPseudoColorImgWidth + i]){
                    max = mTemperature[j*mPseudoColorImgWidth + i];
                }

                if(min > mTemperature[j*mPseudoColorImgWidth +i] && (i!=0 &&j!=0)){
                    min = mTemperature[j*mPseudoColorImgWidth + i];
                }

                aval = aval + mTemperature[j*mPseudoColorImgWidth + i];
            }

        }

        // Template template = new Template();  //leo
        if(mTemperatureMode == KelvinMode)
        {
            max = max / 16;
            min = min / 16;
            aval = aval / 16;
        }
        else if(mTemperatureMode == CentigradeMode)
        {
            max = (float) (max / 16 - 273.15);
            min = (float) (min / 16 - 273.15);
            aval = (float) (aval / 16 - 273.15);
        }
        else if(mTemperatureMode == FahrenheitMode)
        {
            max = (float) (max * 1.8  / 16- 459.625);
            min = (float) (min * 1.8  / 16-459.625);
            aval = (float) (aval * 1.8  / 16- 459.625);
        }
        template.max = max;
        template.min = min;
        template.aval = aval;

        return  template;
    }

    /**
     * 获取人脸的温度最大  最小  平均温度
     * @param faceId    人脸跟踪框的ID
     * @param x 人脸框的x坐标
     * @param y 人脸框的y坐标
     * @param dx 人脸框的宽度
     * @param dy 人脸框的高度
     * @return
     */
    public static Template getFaceTemplateInfo(int faceId,int x,int y,int dx,int dy){



        int startx = x,startY = y;
        int endx = x + dx,endy = y+dy;



        if(endx > mPseudoColorImgWidth || endx < 0 || endy>mPseudoColorImgHeight || endy < 0){
            return  new Template();
        }

        if(startx <= -1){
            startx = 0;
        }

        if(startY <= -1){
            startY = 0;
        }


        Template template = new Template();
        //leo end

        float max = 0f,min = 32767.0f,aval = 0f;

        for(int i=0; i<(TARTGET_TEMPERATURE_MAX - TARTGET_TEMPERATURE_MIN) / 2 + 1; i++)
        {
        	histogramBuffer[i] = 0;
        }

        for(int i = startY ;i < endy;i++){
            for(int j = startx;j < endx ;j++)
            {
            	int tmp = 0;
            	if((i > 0) && (i < (mPseudoColorImgHeight - 1)))
            	{
            		if((j>0) && (j < (mPseudoColorImgWidth - 1)))
            		{            			
            			for(int m=0; m<3; m++)
		            	{
		            		for(int n=0; n<3; n++)
		            		{
		            			tmp += mTemperature[(i - 1 + m) * mPseudoColorImgWidth + (j - 1 + n)];
		            		}
		            	}
		            	tmp /= 9;
		            	mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            		else if(j == 0)
            		{
            			for(int m=0; m<3; m++)
            			{
            				for(int n=0; n<2; n++)
            				{
            					tmp += mTemperature[(i - 1 + m) * mPseudoColorImgWidth + (j+n)];
            				}
            			}
            			tmp = tmp / 6;
            			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            		else if(j == (mPseudoColorImgWidth - 1))
            		{
            			for(int m=0; m<3; m++)
            			{
            				for(int n=0; n<2; n++)
            				{
            					tmp += mTemperature[(i - 1 + m) * mPseudoColorImgWidth + (j-1+n)];
            				}
            			}
            			tmp = tmp / 6;
            			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            	}
            	else if(i == 0)
            	{
            		if((j>0) && (j < (mPseudoColorImgWidth - 1)))
            		{
            			for(int m=0; m<2; m++)
	        			{
	        				for(int n=0; n<3; n++)
	        				{
	        					tmp += mTemperature[(i + m) * mPseudoColorImgWidth + (j-1+n)];
	        				}
	        			}
	        			tmp = tmp / 6;
	        			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            		else if(j == 0)
            		{
            			for(int m=0; m<2; m++)
            			{
            				for(int n=0; n<2; n++)
            				{
            					tmp += mTemperature[(i + m) * mPseudoColorImgWidth + (j+n)];
            				}
            			}
            			tmp = tmp / 4;
            			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            		else if(j == (mPseudoColorImgWidth - 1))
            		{
            			for(int m=0; m<2; m++)
            			{
            				for(int n=0; n<2; n++)
            				{
            					tmp += mTemperature[(i + m) * mPseudoColorImgWidth + (j-1+n)];
            				}
            			}
            			tmp = tmp / 4;
            			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            		
            	}
            	else if(i == (mPseudoColorImgWidth - 1))
            	{
            		if((j>0) && (j < (mPseudoColorImgWidth - 1)))
            		{
            			for(int m=0; m<2; m++)
	        			{
	        				for(int n=0; n<3; n++)
	        				{
	        					tmp += mTemperature[(i - 1 + m) * mPseudoColorImgWidth + (j-1+n)];
	        				}
	        			}
	        			tmp = tmp / 6;
	        			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            		else if(j == 0)
            		{
            			for(int m=0; m<2; m++)
            			{
            				for(int n=0; n<2; n++)
            				{
            					tmp += mTemperature[(i - 1 + m) * mPseudoColorImgWidth + (j+n)];
            				}
            			}
            			tmp = tmp / 4;
            			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            		else if(j == (mPseudoColorImgWidth - 1))
            		{
            			for(int m=0; m<2; m++)
            			{
            				for(int n=0; n<2; n++)
            				{
            					tmp += mTemperature[(i - 1 + m) * mPseudoColorImgWidth + (j-1+n)];
            				}
            			}
            			tmp = tmp / 4;
            			mTemperatureFilterBufferResult[i*mPseudoColorImgWidth + j] = tmp;
            		}
            	}

                if(max < tmp){
                    max = tmp;
                }

                if(min > tmp && (i!=0 &&j!=0)){
                    min = tmp;
                }

                aval = aval + tmp;
            }

        }
        aval = aval / (dx*dy);
        int wPercents;
        //距离补偿
        if(mPseudoColorImgWidth > 0)
        {
        	wPercents = dx * 200 / mPseudoColorImgWidth;
            if(wPercents >= 120)
                wPercents = 120;
        }
        else
        {
        	wPercents = 0;
        }
        // if(wPercents)
        if(wPercents < 21)
        {
        	max += 1.5 * (21 - wPercents);
        }
        else if(wPercents < 40)
        {
        	max -= (wPercents - 21) * 0.85;
        }
        else
        {
        	max -= 16 + (wPercents - 40) * 0.19;
        }

        if(mENVTemparateMode == false)
        {
            if(FaceTemperatureInfoList.size() == 0)
            {
                FaceTemperatureInfo FaceTemperatureInfoTmp = new FaceTemperatureInfo(faceId, x, y, dx, dy);
                FaceTemperatureInfoTmp.temperatureSum += max;
                FaceTemperatureInfoTmp.temperatureCnt++;
                FaceTemperatureInfoTmp.temperatureRaw = FaceTemperatureInfoTmp.temperatureSum / FaceTemperatureInfoTmp.temperatureCnt;

                //add
                FaceTemperatureInfoList.add(FaceTemperatureInfoTmp);

            }
            else
            {
                boolean findListFlag = false;
                for(int i=0; i<FaceTemperatureInfoList.size(); i++)
                {
                    if(FaceTemperatureInfoList.get(i).faceId == faceId)
                    {
                        FaceTemperatureInfoList.get(i).temperatureSum += max;
                        FaceTemperatureInfoList.get(i).temperatureCnt++;
                        FaceTemperatureInfoList.get(i).temperatureRaw = FaceTemperatureInfoList.get(i).temperatureSum / FaceTemperatureInfoList.get(i).temperatureCnt;
                        findListFlag = true;
                        break;
                    }
                }
                if(findListFlag == false)
                {
                    if(FaceTemperatureInfoList.size() < 40)
                    {
                        FaceTemperatureInfo FaceTemperatureInfoTmp = new FaceTemperatureInfo(faceId, x, y, dx, dy);
                        FaceTemperatureInfoTmp.temperatureSum += max;
                        FaceTemperatureInfoTmp.temperatureCnt++;
                        FaceTemperatureInfoTmp.temperatureRaw = FaceTemperatureInfoTmp.temperatureSum / FaceTemperatureInfoTmp.temperatureCnt;
                        FaceTemperatureInfoList.add(FaceTemperatureInfoTmp);
                    }
                    else
                    {
                        FaceTemperatureInfoList.removeElementAt(FaceTemperatureInfoList.size() - 1);
                        FaceTemperatureInfo FaceTemperatureInfoTmp = new FaceTemperatureInfo(faceId, x, y, dx, dy);
                        FaceTemperatureInfoTmp.temperatureSum += max;
                        FaceTemperatureInfoTmp.temperatureCnt++;
                        FaceTemperatureInfoTmp.temperatureRaw = FaceTemperatureInfoTmp.temperatureSum / FaceTemperatureInfoTmp.temperatureCnt;
                        FaceTemperatureInfoList.add(FaceTemperatureInfoTmp);
                    }
                }
            }
            if(FaceTemperatureInfoList.size() >= 8)
            {
                float errSum[] = new float[25];
                int errFlag[] = new int[25];
                for(int i=0; i<25; i++)
                {
                    errSum[i] = 0.0f;
                    errFlag[i] = -1;
                }
                for(int i=0; i<25; i++)
                {
                    switch (mTemperatureMode) {
                        case KelvinMode:        //暂时没有实现
                            
                            break;
                        case CentigradeMode:
                            errSum[i] += 36.2 - (EnvKBTable[i][0] * (max / 16.0 - 273.15) + EnvKBTable[i][1]); //暂时注释
                            errFlag[i] = 0;
                            break;
                        case FahrenheitMode:    //暂时没有实现
                            
                            break;
                    
                        default:
                            break;
                    }
                }
                float errTmpmin = 0.0f;
                int indexBest = -1;
                for(int i=0; i<25; i++)
                {
                    if(errFlag[i] == -1)
                        continue;
                    if(indexBest == -1)
                    {
                        errTmpmin = errSum[i];
                        indexBest = i;
                    }
                    else
                    {
                        if(Math.abs(errTmpmin) > Math.abs(errSum[i]))
                        {
                            errTmpmin = errSum[i];
                            indexBest = i;
                        }
                    }
                }
                mENVTemparate = 15 + indexBest;
                if(mENVTemparateStudyFlag == false)
                {
                    mENVTemparateStudyFlag = true;
                }
            }
            else
            {
                mENVTemparateStudyFlag = false;
            }
        }

        switch (mTemperatureMode) {
            case KelvinMode:        //暂时没有实现
                max = max / 16;
            min = min / 16;
            aval = aval / 16;
                break;
            case CentigradeMode:
                max = (float) (max / 16.0 - 273.15);
                min = (float) (min / 16.0 - 273.15);
                aval = (float) (aval / 16.0 - 273.15);
                break;
            case FahrenheitMode:    //暂时没有实现
                max = (float) (max * 1.8  / 16- 459.625);
            min = (float) (min * 1.8  / 16-459.625);
            aval = (float) (aval * 1.8  / 16- 459.625);
                break;
        
            default:
            max = (float) (max / 16.0 - 273.15);
                min = (float) (min / 16.0 - 273.15);
                aval = (float) (aval / 16.0 - 273.15);
                break;
        }
        // Template template = new Template();  //leo

        //注释2
//        template.max = temperatureEnvCompensation(max);
//        template.min = temperatureEnvCompensation(min);
//        template.aval = temperatureEnvCompensation(aval);

        template.max = max;
        template.min = min;
        template.aval = aval;


        boolean findHistFlag = false;
        if(FaceTemperatureInfoHistList.size() == 0)
        {
            FaceTemperatureInfo FaceTemperatureInfoTmp = new FaceTemperatureInfo(faceId, x, y, dx, dy);
            FaceTemperatureInfoTmp.temperatureCnt = 1;
            FaceTemperatureInfoTmp.temperatureBuffer[(int) FaceTemperatureInfoTmp.temperatureBufferIndex++] =
                    (float) ((template.max + 273.15) * 16);
            FaceTemperatureInfoHistList.add(FaceTemperatureInfoTmp);
        }
        else
        {
            for(int i=0; i<FaceTemperatureInfoHistList.size(); i++)
            {
                if(FaceTemperatureInfoHistList.get(i).faceId == faceId)
                {
                    if(FaceTemperatureInfoHistList.get(i).temperatureBufferIndex >= 5)
                        FaceTemperatureInfoHistList.get(i).temperatureBufferIndex = 0;
                    if(FaceTemperatureInfoHistList.get(i).temperatureCnt < 5)
                        FaceTemperatureInfoHistList.get(i).temperatureCnt = FaceTemperatureInfoHistList.get(i).temperatureCnt + 1;
                    FaceTemperatureInfoHistList.get(i).temperatureBuffer[(int) FaceTemperatureInfoHistList.get(i).temperatureBufferIndex++] = (float) ((template.max + 273.15) * 16);
                    findHistFlag = true;
                    int sumTmp = 0;
                    for(int j=0; j<FaceTemperatureInfoHistList.get(i).temperatureCnt; j++)
                    {
                        sumTmp += FaceTemperatureInfoHistList.get(i).temperatureBuffer[j];
                    }
                    sumTmp /= FaceTemperatureInfoHistList.get(i).temperatureCnt;
                    template.max = sumTmp;
                    break;
                }
            }
            if(findHistFlag == false)
            {
                if(FaceTemperatureInfoHistList.size() < 20)
                {
                    FaceTemperatureInfo FaceTemperatureInfoTmp = new FaceTemperatureInfo(faceId, x, y, dx, dy);
                    FaceTemperatureInfoTmp.temperatureCnt = 1;
                    FaceTemperatureInfoTmp.temperatureBuffer[(int) FaceTemperatureInfoTmp.temperatureBufferIndex++] =
                            (float) ((template.max + 273.15) * 16);
                    FaceTemperatureInfoHistList.add(FaceTemperatureInfoTmp);
                }
                else
                {
                    FaceTemperatureInfoHistList.removeElementAt(FaceTemperatureInfoHistList.size() - 1);
                    FaceTemperatureInfo FaceTemperatureInfoTmp = new FaceTemperatureInfo(faceId, x, y, dx, dy);
                    FaceTemperatureInfoTmp.temperatureCnt = 1;
                    FaceTemperatureInfoTmp.temperatureBuffer[(int) FaceTemperatureInfoTmp.temperatureBufferIndex++] =
                            (float) ((template.max + 273.15) * 16);
                    FaceTemperatureInfoHistList.add(FaceTemperatureInfoTmp);
                }
            }
        }

        if(findHistFlag == true)
        {
            switch (mTemperatureMode) {
            case KelvinMode:        //暂时没有实现
                template.max = template.max / 16;
                break;
            case CentigradeMode:
                template.max = (float) (template.max / 16.0 - 273.15);
                break;
            case FahrenheitMode:    //暂时没有实现
                template.max = (float) (template.max * 1.8  / 16- 459.625);
                break;
        
            default:
            template.max = (float) (template.max / 16.0 - 273.15);
                break;
        }
        }


        return  template;
    }
    /**
     * 环境温度补偿
     *
     * @param temperature   测量得到的温度
     * @return
     */
    public static float temperatureEnvCompensation(float temperature)   //既然环境温度已经是成员变量，就使用成员变量的值，无需再次传递该参数
    {
        float tempCompensation = 0;
        short kbIndex = 0;
        double a,b,s1 = 0,s2 = 0,s3 = 0,s4 = 0;
        float tmpVal;
        int n = 25;
        switch (mTemperatureMode) {
            case KelvinMode:        //暂时没有实现
                
                break;
            case CentigradeMode:
                if(mENVTemparateMode == false)  //自适应环境温度模式
                {
                    if(mENVTemparateStudyFlag)
                    {
                        kbIndex = (short)mENVTemparate;
                        if((kbIndex >= 15) && (kbIndex <= 39))
                        {
                            kbIndex = (short) (kbIndex - 15);
                            tempCompensation = EnvKBTable[kbIndex][0] * temperature + EnvKBTable[kbIndex][1];
                        }
                        else 
                        {   
                            for(int i = 0; i < n;i++)
                            {
                                int x = 15 + i;
                                float y = EnvKBTable[i][0] * temperature + EnvKBTable[i][1];
                                s1 = s1 + x*y;
                                s2 = s2 + x;
                                s3 = s3 + y;
                                s4 = s4 + x*x;
                            }
                            a = (n * s1 - s2 * s3)/(n * s4 - s2 * s2);
                            b = (s3 * s4 - s2 * s1)/(n * s4 - s2*s2);

                            tempCompensation = (float) (a * mENVTemparate + b);
                        }
                    }
                    else
                    {
                        //tempCompensation = 36.2f + (((int)(tempCompensation * 10)) & 0x3);
						tempCompensation = EnvKBTable[15][0] * temperature + EnvKBTable[15][1];
                    }
                }
                else    //手动设置环境温度模式
                {
                    kbIndex = (short)mENVTemparate;
                    if((kbIndex >= 15) && (kbIndex <= 39))
                    {
                        kbIndex = (short) (kbIndex - 15);
                        tempCompensation = EnvKBTable[kbIndex][0] * temperature + EnvKBTable[kbIndex][1];
                    }
                    else 
                    {   
                        for(int i = 0; i < n;i++)
                        {
                            int x = 15 + i;
                            float y = EnvKBTable[i][0] * temperature + EnvKBTable[i][1];
                            s1 = s1 + x*y;
                            s2 = s2 + x;
                            s3 = s3 + y;
                            s4 = s4 + x*x;
                        }
                        a = (n * s1 - s2 * s3)/(n * s4 - s2 * s2);
                        b = (s3 * s4 - s2 * s1)/(n * s4 - s2*s2);

                        tempCompensation = (float) (a * mENVTemparate + b);
                    }
                }
                break;
            case FahrenheitMode:    //暂时没有实现
                
                break;
        
            default:
                break;
        }
        return tempCompensation;
    }




    public static void setiColorImg(IColorImg iColorImg){
        mIColorImg = iColorImg;
    }
    public  static IColorImg mIColorImg;
    public  interface  IColorImg{
        void show(int[] colorBytes);
        void showTemparate(float min, float max);
        void showMaxOrMinTemparate(MyPoint maxPoint, MyPoint minPoint, float min, float max);
    }





}
